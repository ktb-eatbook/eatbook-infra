jenkins:
  systemMessage: "Jenkins configured using JCasC"
  numExecutors: 2
  scmCheckoutRetryCount: 3

  # Jenkins 환경변수 설정
  environmentVariables:
    AWS_REGION: 'ap-northeast-2'
    ECR_REPO_NAME: 'eatbook-be-ecr'
    AWS_ACCOUNT_ID: '992382409749'
    IMAGE_TAG: "latest"
    ECR_REPO_URI: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
    COMPOSE_FILE: 'docker-compose.yml'

  # Jenkins 자격 증명 설정 (AWS, GitHub 액세스 토큰 등)
  credentials:
    system:
      domainCredentials:
        - credentials:
            - sshUserPrivateKey:
                id: 'instance-ssh-key-id'
                privateKey: "${PRIVATE_SSH_KEY}"
            - awsCredentials:
                id: 'aws-credentials-id'
                accessKey: "${AWS_ACCESS_KEY}"
                secretKey: "${AWS_SECRET_KEY}"
                region: "${AWS_REGION}"

  # GitHub 설정
  git:
    url: 'https://github.com/ktb-eatbook/eatbook-backoffice-backend.git'
    credentialsId: 'github-access-token-id'
    branch: 'feature/cicd-test'

  # Jenkins Jobs 설정 (Pipeline 예시)
  jobs:
    - script: |
        pipeline {
          agent any
          environment {
            AWS_REGION = 'ap-northeast-2'
            ECR_REPO_NAME = 'eatbook-be-ecr'
            AWS_ACCOUNT_ID = '992382409749'
            IMAGE_TAG = "latest"
            ECR_REPO_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
            COMPOSE_FILE = 'docker-compose.yml'

            # SSH Key IDs (Jenkins Credentials ID)
            PRIVATE_INSTANCE_SSH_KEY_ID = 'instance-ssh-key-id'
            BASTION_HOST_SSH_KEY_ID = 'instance-ssh-key-id'
          }
          stages {
            stage('Checkout Code') {
              steps {
                git url: 'https://github.com/ktb-eatbook/eatbook-backoffice-backend.git', branch: 'feature/cicd-test', credentialsId: 'github-access-token-id'
              }
            }
            stage('Build Docker Image') {
              steps {
                script {
                  docker.build("${ECR_REPO_NAME}:${IMAGE_TAG}")
                }
              }
            }
            stage('Login to AWS ECR') {
              steps {
                script {
                  withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials-id') {
                    sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URI}'
                  }
                }
              }
            }
            stage('Push to ECR') {
              steps {
                script {
                  sh "docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_REPO_URI}:${IMAGE_TAG}"
                  sh "docker push ${ECR_REPO_URI}:${IMAGE_TAG}"
                }
              }
            }
            stage('Deploy on Private Instance with Docker Compose') {
              steps {
                script {
                  sh '''
                  docker-compose down || true
                  docker pull ${ECR_REPO_URI}:${IMAGE_TAG}
                  docker rm -f spring-app || true  # 기존 컨테이너 강제로 삭제함
                  fuser -k 8090/tcp || true  # 8090 포트를 점유한 프로세스 강제 종료
                  docker network prune -f || true  # 네트워크 초기화함
                  sleep 5  # 잠시 대기하여 포트 해제
                  docker-compose --env-file /var/jenkins_env/.env up --force-recreate -d
                  '''
                }
              }
            }
          }
        }
    - name: 'Deploy Pipeline'
      description: 'Jenkins pipeline for deployment of backend service.'
      schedule: 'H 2 * * *'  # This job will run daily at 2 AM