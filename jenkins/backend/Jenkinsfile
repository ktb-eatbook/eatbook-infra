pipeline {
    agent any
    environment {
        AWS_REGION = 'ap-northeast-2'
        ECR_REPO_NAME = 'eatbook-be-ecr'
        AWS_ACCOUNT_ID = '992382409749'
        IMAGE_TAG = "latest"
        ECR_REPO_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
        COMPOSE_FILE = 'docker-compose.yml'

        // SSH Key IDs (Jenkins Credentials ID)
        PRIVATE_INSTANCE_SSH_KEY_ID = 'instance-ssh-key-id'
        BASTION_HOST_SSH_KEY_ID = 'instance-ssh-key-id'
    }
    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/ktb-eatbook/eatbook-backoffice-backend.git', branch: 'feature/cicd-test', credentialsId: 'github-access-token-id'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${ECR_REPO_NAME}:${IMAGE_TAG}")
                }
            }
        }
        stage('Login to AWS ECR') {
            steps {
                script {
                    withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials-id') {
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URI}'
                    }
                }
            }
        }
        stage('Push to ECR') {
            steps {
                script {
                    sh "docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_REPO_URI}:${IMAGE_TAG}"
                    sh "docker push ${ECR_REPO_URI}:${IMAGE_TAG}"
                }
            }
        }
        stage('Deploy on Private Instance with Docker Compose') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'private-ip', variable: 'PRIVATE_IP'),
                        string(credentialsId: 'public-ip', variable: 'PUBLIC_IP')
                    ]) {
                        sshagent([BASTION_HOST_SSH_KEY_ID, PRIVATE_INSTANCE_SSH_KEY_ID]) {
                            sh """
                            ssh -v -o StrictHostKeyChecking=no -o ProxyCommand="ssh -W %h:%p ubuntu@${PUBLIC_IP}" ubuntu@${PRIVATE_IP} <<EOF
                            docker pull ${ECR_REPO_URI}:${IMAGE_TAG}
                            sed -i 's|image: .*|image: ${ECR_REPO_URI}:${IMAGE_TAG}|' ${COMPOSE_FILE}
                            docker-compose -f ${COMPOSE_FILE} up -d --force-recreate
                            EOF
                            """
                        }
                    }
                }
            }
        }
    }
}