pipeline {
    agent any
    environment {
        AWS_REGION = 'ap-northeast-2'
        ECR_REPO_NAME = 'eatbook-be-ecr'
        AWS_ACCOUNT_ID = '992382409749'
        IMAGE_TAG = "latest"
        ECR_REPO_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
        COMPOSE_FILE = 'docker-compose.yml'

        // SSH Key IDs (Jenkins Credentials ID)
        PRIVATE_INSTANCE_SSH_KEY_ID = 'instance-ssh-key-id'
        BASTION_HOST_SSH_KEY_ID = 'instance-ssh-key-id'
    }
    stages {
        stage('Checkout Backend Code') {
            steps {
                dir('backend') {
                    git url: 'https://github.com/ktb-eatbook/eatbook-backoffice-backend.git', branch: 'hotfix/v1', credentialsId: 'github-access-token-id'
                }
            }
        }
        stage('Checkout Infra Code') {
            steps {
                dir('infra') {
                    git url: 'https://github.com/ktb-eatbook/eatbook-infra.git', branch: 'main', credentialsId: 'github-access-token-id'
                }
            }
        }
        stage('Move Docker Files to Backend') {
            steps {
                script {
                    sh '''
                    cp infra/docker/web-backend/Dockerfile backend/
                    cp infra/docker/web-backend/docker-compose.yml backend/
                    cp config/.env backend/src/main/resources/
                    cp -r config/* backend/src/main/resources/
                    sudo chown jenkins:jenkins backend/src/main/resources/.env
                    sudo chmod 644 backend/src/main/resources/.env
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('backend') {
                    script {
                        docker.build("${ECR_REPO_NAME}:${IMAGE_TAG}")
                    }
                }
            }
        }
        stage('Login to AWS ECR') {
            steps {
                script {
                    withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials-id') {
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URI}'
                    }
                }
            }
        }
        stage('Push to ECR') {
            steps {
                script {
                    sh "docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_REPO_URI}:${IMAGE_TAG}"
                    sh "docker push ${ECR_REPO_URI}:${IMAGE_TAG}"
                }
            }
        }
        stage('Deploy on Private Instance with Docker Compose') {
            steps {
                dir('backend') {
                    script {
                        sh '''
                        docker-compose -f ${COMPOSE_FILE} down || true
                        docker pull ${ECR_REPO_URI}:${IMAGE_TAG}
                        docker rm -f spring-app || true
                        fuser -k 8090/tcp || true
                        docker network prune -f || true
                        sleep 5
                        docker-compose -f ${COMPOSE_FILE} up --force-recreate -d
                        docker system prune -af || true
                        '''
                    }
                }
            }
        }
    }
}